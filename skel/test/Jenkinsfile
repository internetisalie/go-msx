def REPO_NAME = 'go-msx'
def ARTIFACTORY_CREDENTIALS = 'f79d92f8-694b-4c29-b477-faeabcef86cb'
def DOCKER_CREDENTIALS = '992579b4-1041-4bd1-827c-6d507970e355'
def VMSBLD_CREDENTIALS = 'msx-jenkins-gen-ssh-key'
def GITHUB_CREDENTIALS = 'msx-jenkins-gen-token-secret-text'
def GITHUB_APP_ID_SONARQUBE = '7'
def GITHUB_APP_NAME_SONARQUBE = 'engit-sonar-int-gen-GPK'
def SONARQUBE_CREDENTIALS = 'SONARQUBE_GPK_ACCESS_TOKEN'
def SONARQUBE_INSTALLATION = 'GPK SonarQube'
def TRUNK = 'master'

pipeline {

    agent {
        label env.SLAVE_LABEL
    }

    /* Only keep the 10 most recent builds. */
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    stages {

        stage('Preparation') {
            steps {
                deleteDir()

                script {
                    assert env.BUILD_NUMBER
                    assert env.WORKSPACE
                    assert env.TEST_NAME

                    if (env.BRANCH_NAME) {
                        currentBuild.description = env.BRANCH_NAME + " (Manual)"
                    } else if (env.sha1) {
                        // When called from GitHub PR Builder
                        env.BRANCH_NAME = env.sha1
                    } else if (env.GIT_BRANCH) {
                        // When called from GitHub Push Notifier
                        env.BRANCH_NAME = env.GIT_BRANCH.replaceAll("origin/", "")
                        currentBuild.description = env.BRANCH_NAME + " (Push)"
                    }
                }
            }
        }

        stage('Checkout') {
            steps {

                checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: env.BRANCH_NAME ?: TRUNK]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [[
                        $class: 'RelativeTargetDirectory',
                        relativeTargetDir: REPO_NAME,
                    ]],
                    userRemoteConfigs                : [[
                        credentialsId: VMSBLD_CREDENTIALS,
                        url          : "git@cto-github.cisco.com:NFV-BU/${REPO_NAME}.git",
                        refspec:       '+refs/pull/*:refs/remotes/origin/pr/* +refs/heads/*:refs/remotes/origin/*'
                    ]]
                ])

            }
        }

        stage('Execute Test') {
            steps {
                sshagent([VMSBLD_CREDENTIALS]) {
                    withEnv([
                        "GOPATH=${env.WORKSPACE}/go",
                        "GOPRIVATE=cto-github.cisco.com/NFV-BU",
                        "GOPROXY=https://engci-maven.cisco.com/artifactory/go/,https://proxy.golang.org,direct",
                        "PATH+GOBIN=${env.WORKSPACE}/go/bin",
                    ]) {
                        script { withCredentials([usernamePassword(
                            credentialsId: DOCKER_CREDENTIALS,
                            passwordVariable: 'DOCKER_PASSWORD',
                            usernameVariable: 'DOCKER_USERNAME')]) { withCredentials([usernamePassword(
                                credentialsId: ARTIFACTORY_CREDENTIALS,
                                passwordVariable: 'ARTIFACTORY_PASSWORD',
                                usernameVariable: 'ARTIFACTORY_USERNAME')]) {
                            sh 'git config --global url."git@cto-github.cisco.com:".insteadOf "https://cto-github.cisco.com/"'
                            sh "bash -xe go-msx/skel/test/${env.TEST_NAME}.sh"
                        }}}
                    }
                }
            }
        }

    }
}
