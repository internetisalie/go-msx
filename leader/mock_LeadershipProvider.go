// Code generated by mockery v2.3.0. DO NOT EDIT.

package leader

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLeadershipProvider is an autogenerated mock type for the LeadershipProvider type
type MockLeadershipProvider struct {
	mock.Mock
}

// IsLeader provides a mock function with given fields: ctx, key
func (_m *MockLeadershipProvider) IsLeader(ctx context.Context, key string) bool {
	ret := _m.Called(ctx, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MasterKey provides a mock function with given fields: ctx
func (_m *MockLeadershipProvider) MasterKey(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReleaseLeadership provides a mock function with given fields: ctx, key
func (_m *MockLeadershipProvider) ReleaseLeadership(ctx context.Context, key string) {
	_m.Called(ctx, key)
}

// Start provides a mock function with given fields: ctx
func (_m *MockLeadershipProvider) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *MockLeadershipProvider) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
