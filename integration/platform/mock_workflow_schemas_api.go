// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockWorkflowSchemasApi is an autogenerated mock type for the WorkflowSchemasApi type
type MockWorkflowSchemasApi struct {
	mock.Mock
}

// GetWorkflowSchema provides a mock function with given fields: ctx, id, localVarOptionals
func (_m *MockWorkflowSchemasApi) GetWorkflowSchema(ctx context.Context, id string, localVarOptionals *msx_platform_client.GetWorkflowSchemaOpts) (msx_platform_client.WorkflowSchemaByTypeResponse, *http.Response, error) {
	ret := _m.Called(ctx, id, localVarOptionals)

	var r0 msx_platform_client.WorkflowSchemaByTypeResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemaOpts) msx_platform_client.WorkflowSchemaByTypeResponse); ok {
		r0 = rf(ctx, id, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowSchemaByTypeResponse)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemaOpts) *http.Response); ok {
		r1 = rf(ctx, id, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemaOpts) error); ok {
		r2 = rf(ctx, id, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowSchemasList provides a mock function with given fields: ctx, baseType, localVarOptionals
func (_m *MockWorkflowSchemasApi) GetWorkflowSchemasList(ctx context.Context, baseType string, localVarOptionals *msx_platform_client.GetWorkflowSchemasListOpts) ([]msx_platform_client.WorkflowSchema, *http.Response, error) {
	ret := _m.Called(ctx, baseType, localVarOptionals)

	var r0 []msx_platform_client.WorkflowSchema
	if rf, ok := ret.Get(0).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemasListOpts) []msx_platform_client.WorkflowSchema); ok {
		r0 = rf(ctx, baseType, localVarOptionals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.WorkflowSchema)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemasListOpts) *http.Response); ok {
		r1 = rf(ctx, baseType, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *msx_platform_client.GetWorkflowSchemasListOpts) error); ok {
		r2 = rf(ctx, baseType, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
