// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockRolesApi is an autogenerated mock type for the RolesApi type
type MockRolesApi struct {
	mock.Mock
}

// GetRoleByName provides a mock function with given fields: ctx, name
func (_m *MockRolesApi) GetRoleByName(ctx context.Context, name string) (msx_platform_client.Role, *http.Response, error) {
	ret := _m.Called(ctx, name)

	var r0 msx_platform_client.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.Role); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Role)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRolesList provides a mock function with given fields: ctx, ids
func (_m *MockRolesApi) GetRolesList(ctx context.Context, ids []string) ([]msx_platform_client.Role, *http.Response, error) {
	ret := _m.Called(ctx, ids)

	var r0 []msx_platform_client.Role
	if rf, ok := ret.Get(0).(func(context.Context, []string) []msx_platform_client.Role); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.Role)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, []string) *http.Response); ok {
		r1 = rf(ctx, ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string) error); ok {
		r2 = rf(ctx, ids)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
