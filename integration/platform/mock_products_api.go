// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockProductsApi is an autogenerated mock type for the ProductsApi type
type MockProductsApi struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, productCreate
func (_m *MockProductsApi) CreateProduct(ctx context.Context, productCreate msx_platform_client.ProductCreate) (msx_platform_client.Product, *http.Response, error) {
	ret := _m.Called(ctx, productCreate)

	var r0 msx_platform_client.Product
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.ProductCreate) msx_platform_client.Product); ok {
		r0 = rf(ctx, productCreate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Product)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.ProductCreate) *http.Response); ok {
		r1 = rf(ctx, productCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, msx_platform_client.ProductCreate) error); ok {
		r2 = rf(ctx, productCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *MockProductsApi) DeleteProduct(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, id
func (_m *MockProductsApi) GetProduct(ctx context.Context, id string) (msx_platform_client.Product, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.Product
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Product)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsCount provides a mock function with given fields: ctx
func (_m *MockProductsApi) GetProductsCount(ctx context.Context) (int64, *http.Response, error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context) *http.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsPage provides a mock function with given fields: ctx, page, pageSize
func (_m *MockProductsApi) GetProductsPage(ctx context.Context, page int32, pageSize int32) (msx_platform_client.ProductsPage, *http.Response, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 msx_platform_client.ProductsPage
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) msx_platform_client.ProductsPage); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		r0 = ret.Get(0).(msx_platform_client.ProductsPage)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) *http.Response); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int32, int32) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateProduct provides a mock function with given fields: ctx, id, productUpdate
func (_m *MockProductsApi) UpdateProduct(ctx context.Context, id string, productUpdate msx_platform_client.ProductUpdate) (msx_platform_client.Product, *http.Response, error) {
	ret := _m.Called(ctx, id, productUpdate)

	var r0 msx_platform_client.Product
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.ProductUpdate) msx_platform_client.Product); ok {
		r0 = rf(ctx, id, productUpdate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Product)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.ProductUpdate) *http.Response); ok {
		r1 = rf(ctx, id, productUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.ProductUpdate) error); ok {
		r2 = rf(ctx, id, productUpdate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
