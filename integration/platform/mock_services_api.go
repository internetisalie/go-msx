// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockServicesApi is an autogenerated mock type for the ServicesApi type
type MockServicesApi struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: ctx, id
func (_m *MockServicesApi) DeleteService(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, id
func (_m *MockServicesApi) GetService(ctx context.Context, id string) (msx_platform_client.Service, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.Service
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.Service); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Service)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetServicesPage provides a mock function with given fields: ctx, page, pageSize, localVarOptionals
func (_m *MockServicesApi) GetServicesPage(ctx context.Context, page int32, pageSize int32, localVarOptionals *msx_platform_client.GetServicesPageOpts) (msx_platform_client.ServicesPage, *http.Response, error) {
	ret := _m.Called(ctx, page, pageSize, localVarOptionals)

	var r0 msx_platform_client.ServicesPage
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *msx_platform_client.GetServicesPageOpts) msx_platform_client.ServicesPage); ok {
		r0 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.ServicesPage)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, *msx_platform_client.GetServicesPageOpts) *http.Response); ok {
		r1 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int32, int32, *msx_platform_client.GetServicesPageOpts) error); ok {
		r2 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SubmitOrder provides a mock function with given fields: ctx, productId, offerId, legacyServiceOrder
func (_m *MockServicesApi) SubmitOrder(ctx context.Context, productId string, offerId string, legacyServiceOrder msx_platform_client.LegacyServiceOrder) (msx_platform_client.LegacyServiceOrderResponse, *http.Response, error) {
	ret := _m.Called(ctx, productId, offerId, legacyServiceOrder)

	var r0 msx_platform_client.LegacyServiceOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) msx_platform_client.LegacyServiceOrderResponse); ok {
		r0 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		r0 = ret.Get(0).(msx_platform_client.LegacyServiceOrderResponse)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) *http.Response); ok {
		r1 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) error); ok {
		r2 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateOrder provides a mock function with given fields: ctx, productId, offerId, legacyServiceOrder
func (_m *MockServicesApi) UpdateOrder(ctx context.Context, productId string, offerId string, legacyServiceOrder msx_platform_client.LegacyServiceOrder) (msx_platform_client.LegacyServiceOrderResponse, *http.Response, error) {
	ret := _m.Called(ctx, productId, offerId, legacyServiceOrder)

	var r0 msx_platform_client.LegacyServiceOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) msx_platform_client.LegacyServiceOrderResponse); ok {
		r0 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		r0 = ret.Get(0).(msx_platform_client.LegacyServiceOrderResponse)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) *http.Response); ok {
		r1 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, msx_platform_client.LegacyServiceOrder) error); ok {
		r2 = rf(ctx, productId, offerId, legacyServiceOrder)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
