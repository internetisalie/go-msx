// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockSitesApi is an autogenerated mock type for the SitesApi type
type MockSitesApi struct {
	mock.Mock
}

// AddDeviceToSite provides a mock function with given fields: ctx, id, deviceId, localVarOptionals
func (_m *MockSitesApi) AddDeviceToSite(ctx context.Context, id string, deviceId string, localVarOptionals *msx_platform_client.AddDeviceToSiteOpts) (msx_platform_client.Site, *http.Response, error) {
	ret := _m.Called(ctx, id, deviceId, localVarOptionals)

	var r0 msx_platform_client.Site
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *msx_platform_client.AddDeviceToSiteOpts) msx_platform_client.Site); ok {
		r0 = rf(ctx, id, deviceId, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Site)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *msx_platform_client.AddDeviceToSiteOpts) *http.Response); ok {
		r1 = rf(ctx, id, deviceId, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *msx_platform_client.AddDeviceToSiteOpts) error); ok {
		r2 = rf(ctx, id, deviceId, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateSite provides a mock function with given fields: ctx, siteCreate
func (_m *MockSitesApi) CreateSite(ctx context.Context, siteCreate msx_platform_client.SiteCreate) (msx_platform_client.Site, *http.Response, error) {
	ret := _m.Called(ctx, siteCreate)

	var r0 msx_platform_client.Site
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.SiteCreate) msx_platform_client.Site); ok {
		r0 = rf(ctx, siteCreate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Site)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.SiteCreate) *http.Response); ok {
		r1 = rf(ctx, siteCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, msx_platform_client.SiteCreate) error); ok {
		r2 = rf(ctx, siteCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteSite provides a mock function with given fields: ctx, id
func (_m *MockSitesApi) DeleteSite(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSite provides a mock function with given fields: ctx, id, localVarOptionals
func (_m *MockSitesApi) GetSite(ctx context.Context, id string, localVarOptionals *msx_platform_client.GetSiteOpts) (msx_platform_client.Site, *http.Response, error) {
	ret := _m.Called(ctx, id, localVarOptionals)

	var r0 msx_platform_client.Site
	if rf, ok := ret.Get(0).(func(context.Context, string, *msx_platform_client.GetSiteOpts) msx_platform_client.Site); ok {
		r0 = rf(ctx, id, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Site)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, *msx_platform_client.GetSiteOpts) *http.Response); ok {
		r1 = rf(ctx, id, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, *msx_platform_client.GetSiteOpts) error); ok {
		r2 = rf(ctx, id, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSitesPage provides a mock function with given fields: ctx, page, pageSize, localVarOptionals
func (_m *MockSitesApi) GetSitesPage(ctx context.Context, page int32, pageSize int32, localVarOptionals *msx_platform_client.GetSitesPageOpts) (msx_platform_client.SitesPage, *http.Response, error) {
	ret := _m.Called(ctx, page, pageSize, localVarOptionals)

	var r0 msx_platform_client.SitesPage
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *msx_platform_client.GetSitesPageOpts) msx_platform_client.SitesPage); ok {
		r0 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.SitesPage)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, *msx_platform_client.GetSitesPageOpts) *http.Response); ok {
		r1 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int32, int32, *msx_platform_client.GetSitesPageOpts) error); ok {
		r2 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveDeviceFromSite provides a mock function with given fields: ctx, id, deviceId
func (_m *MockSitesApi) RemoveDeviceFromSite(ctx context.Context, id string, deviceId string) (*http.Response, error) {
	ret := _m.Called(ctx, id, deviceId)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *http.Response); ok {
		r0 = rf(ctx, id, deviceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, deviceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSite provides a mock function with given fields: ctx, id, siteUpdate, localVarOptionals
func (_m *MockSitesApi) UpdateSite(ctx context.Context, id string, siteUpdate msx_platform_client.SiteUpdate, localVarOptionals *msx_platform_client.UpdateSiteOpts) (msx_platform_client.Site, *http.Response, error) {
	ret := _m.Called(ctx, id, siteUpdate, localVarOptionals)

	var r0 msx_platform_client.Site
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.SiteUpdate, *msx_platform_client.UpdateSiteOpts) msx_platform_client.Site); ok {
		r0 = rf(ctx, id, siteUpdate, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Site)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.SiteUpdate, *msx_platform_client.UpdateSiteOpts) *http.Response); ok {
		r1 = rf(ctx, id, siteUpdate, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.SiteUpdate, *msx_platform_client.UpdateSiteOpts) error); ok {
		r2 = rf(ctx, id, siteUpdate, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
