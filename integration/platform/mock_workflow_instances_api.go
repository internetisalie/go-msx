// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockWorkflowInstancesApi is an autogenerated mock type for the WorkflowInstancesApi type
type MockWorkflowInstancesApi struct {
	mock.Mock
}

// CancelWorkflowInstance provides a mock function with given fields: ctx, id
func (_m *MockWorkflowInstancesApi) CancelWorkflowInstance(ctx context.Context, id string) (msx_platform_client.WorkflowInstance, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.WorkflowInstance
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.WorkflowInstance); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowInstance)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteWorkflowInstance provides a mock function with given fields: ctx, id
func (_m *MockWorkflowInstancesApi) DeleteWorkflowInstance(ctx context.Context, id string) (msx_platform_client.WorkflowInstanceDeleteResponse, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.WorkflowInstanceDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.WorkflowInstanceDeleteResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowInstanceDeleteResponse)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowInstance provides a mock function with given fields: ctx, id
func (_m *MockWorkflowInstancesApi) GetWorkflowInstance(ctx context.Context, id string) (msx_platform_client.WorkflowInstance, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.WorkflowInstance
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.WorkflowInstance); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowInstance)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowInstanceAction provides a mock function with given fields: ctx, id, actionId
func (_m *MockWorkflowInstancesApi) GetWorkflowInstanceAction(ctx context.Context, id string, actionId string) (msx_platform_client.WorkflowAction, *http.Response, error) {
	ret := _m.Called(ctx, id, actionId)

	var r0 msx_platform_client.WorkflowAction
	if rf, ok := ret.Get(0).(func(context.Context, string, string) msx_platform_client.WorkflowAction); ok {
		r0 = rf(ctx, id, actionId)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowAction)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *http.Response); ok {
		r1 = rf(ctx, id, actionId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, id, actionId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowInstancesList provides a mock function with given fields: ctx, id, page, pageSize, localVarOptionals
func (_m *MockWorkflowInstancesApi) GetWorkflowInstancesList(ctx context.Context, id string, page int32, pageSize int32, localVarOptionals *msx_platform_client.GetWorkflowInstancesListOpts) ([]msx_platform_client.WorkflowInstance, *http.Response, error) {
	ret := _m.Called(ctx, id, page, pageSize, localVarOptionals)

	var r0 []msx_platform_client.WorkflowInstance
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32, *msx_platform_client.GetWorkflowInstancesListOpts) []msx_platform_client.WorkflowInstance); ok {
		r0 = rf(ctx, id, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.WorkflowInstance)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32, *msx_platform_client.GetWorkflowInstancesListOpts) *http.Response); ok {
		r1 = rf(ctx, id, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int32, int32, *msx_platform_client.GetWorkflowInstancesListOpts) error); ok {
		r2 = rf(ctx, id, page, pageSize, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
