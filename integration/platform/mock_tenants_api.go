// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockTenantsApi is an autogenerated mock type for the TenantsApi type
type MockTenantsApi struct {
	mock.Mock
}

// CreateTenant provides a mock function with given fields: ctx, tenantCreate
func (_m *MockTenantsApi) CreateTenant(ctx context.Context, tenantCreate msx_platform_client.TenantCreate) (msx_platform_client.Tenant, *http.Response, error) {
	ret := _m.Called(ctx, tenantCreate)

	var r0 msx_platform_client.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.TenantCreate) msx_platform_client.Tenant); ok {
		r0 = rf(ctx, tenantCreate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Tenant)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.TenantCreate) *http.Response); ok {
		r1 = rf(ctx, tenantCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, msx_platform_client.TenantCreate) error); ok {
		r2 = rf(ctx, tenantCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteTenant provides a mock function with given fields: ctx, id
func (_m *MockTenantsApi) DeleteTenant(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenant provides a mock function with given fields: ctx, id
func (_m *MockTenantsApi) GetTenant(ctx context.Context, id string) (msx_platform_client.Tenant, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.Tenant); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Tenant)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTenantsList provides a mock function with given fields: ctx, ids, localVarOptionals
func (_m *MockTenantsApi) GetTenantsList(ctx context.Context, ids []string, localVarOptionals *msx_platform_client.GetTenantsListOpts) ([]msx_platform_client.Tenant, *http.Response, error) {
	ret := _m.Called(ctx, ids, localVarOptionals)

	var r0 []msx_platform_client.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, []string, *msx_platform_client.GetTenantsListOpts) []msx_platform_client.Tenant); ok {
		r0 = rf(ctx, ids, localVarOptionals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.Tenant)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, []string, *msx_platform_client.GetTenantsListOpts) *http.Response); ok {
		r1 = rf(ctx, ids, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []string, *msx_platform_client.GetTenantsListOpts) error); ok {
		r2 = rf(ctx, ids, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTenantsPage provides a mock function with given fields: ctx, page, pageSize, localVarOptionals
func (_m *MockTenantsApi) GetTenantsPage(ctx context.Context, page int32, pageSize int32, localVarOptionals *msx_platform_client.GetTenantsPageOpts) (msx_platform_client.TenantsPage, *http.Response, error) {
	ret := _m.Called(ctx, page, pageSize, localVarOptionals)

	var r0 msx_platform_client.TenantsPage
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *msx_platform_client.GetTenantsPageOpts) msx_platform_client.TenantsPage); ok {
		r0 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.TenantsPage)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, *msx_platform_client.GetTenantsPageOpts) *http.Response); ok {
		r1 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int32, int32, *msx_platform_client.GetTenantsPageOpts) error); ok {
		r2 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateTenant provides a mock function with given fields: ctx, id, tenantUpdate
func (_m *MockTenantsApi) UpdateTenant(ctx context.Context, id string, tenantUpdate msx_platform_client.TenantUpdate) (msx_platform_client.Tenant, *http.Response, error) {
	ret := _m.Called(ctx, id, tenantUpdate)

	var r0 msx_platform_client.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.TenantUpdate) msx_platform_client.Tenant); ok {
		r0 = rf(ctx, id, tenantUpdate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Tenant)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.TenantUpdate) *http.Response); ok {
		r1 = rf(ctx, id, tenantUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.TenantUpdate) error); ok {
		r2 = rf(ctx, id, tenantUpdate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
