// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockWorkflowsApi is an autogenerated mock type for the WorkflowsApi type
type MockWorkflowsApi struct {
	mock.Mock
}

// DeleteWorkflow provides a mock function with given fields: ctx, id
func (_m *MockWorkflowsApi) DeleteWorkflow(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportWorkflow provides a mock function with given fields: ctx, id
func (_m *MockWorkflowsApi) ExportWorkflow(ctx context.Context, id string) (string, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflow provides a mock function with given fields: ctx, id
func (_m *MockWorkflowsApi) GetWorkflow(ctx context.Context, id string) (msx_platform_client.Workflow, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.Workflow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.Workflow)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowStartConfig provides a mock function with given fields: ctx, id
func (_m *MockWorkflowsApi) GetWorkflowStartConfig(ctx context.Context, id string) (msx_platform_client.WorkflowStartConfig, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.WorkflowStartConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.WorkflowStartConfig); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowStartConfig)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowsList provides a mock function with given fields: ctx, localVarOptionals
func (_m *MockWorkflowsApi) GetWorkflowsList(ctx context.Context, localVarOptionals *msx_platform_client.GetWorkflowsListOpts) ([]msx_platform_client.Workflow, *http.Response, error) {
	ret := _m.Called(ctx, localVarOptionals)

	var r0 []msx_platform_client.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *msx_platform_client.GetWorkflowsListOpts) []msx_platform_client.Workflow); ok {
		r0 = rf(ctx, localVarOptionals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.Workflow)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, *msx_platform_client.GetWorkflowsListOpts) *http.Response); ok {
		r1 = rf(ctx, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *msx_platform_client.GetWorkflowsListOpts) error); ok {
		r2 = rf(ctx, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportWorkflow provides a mock function with given fields: ctx, requestBody, localVarOptionals
func (_m *MockWorkflowsApi) ImportWorkflow(ctx context.Context, requestBody map[string]map[string]interface{}, localVarOptionals *msx_platform_client.ImportWorkflowOpts) (msx_platform_client.WorkflowMapping, *http.Response, error) {
	ret := _m.Called(ctx, requestBody, localVarOptionals)

	var r0 msx_platform_client.WorkflowMapping
	if rf, ok := ret.Get(0).(func(context.Context, map[string]map[string]interface{}, *msx_platform_client.ImportWorkflowOpts) msx_platform_client.WorkflowMapping); ok {
		r0 = rf(ctx, requestBody, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowMapping)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, map[string]map[string]interface{}, *msx_platform_client.ImportWorkflowOpts) *http.Response); ok {
		r1 = rf(ctx, requestBody, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]map[string]interface{}, *msx_platform_client.ImportWorkflowOpts) error); ok {
		r2 = rf(ctx, requestBody, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StartWorkflow provides a mock function with given fields: ctx, id, workflowStartConfig, localVarOptionals
func (_m *MockWorkflowsApi) StartWorkflow(ctx context.Context, id string, workflowStartConfig msx_platform_client.WorkflowStartConfig, localVarOptionals *msx_platform_client.StartWorkflowOpts) ([]msx_platform_client.StartWorkflowResponse, *http.Response, error) {
	ret := _m.Called(ctx, id, workflowStartConfig, localVarOptionals)

	var r0 []msx_platform_client.StartWorkflowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.WorkflowStartConfig, *msx_platform_client.StartWorkflowOpts) []msx_platform_client.StartWorkflowResponse); ok {
		r0 = rf(ctx, id, workflowStartConfig, localVarOptionals)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.StartWorkflowResponse)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.WorkflowStartConfig, *msx_platform_client.StartWorkflowOpts) *http.Response); ok {
		r1 = rf(ctx, id, workflowStartConfig, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.WorkflowStartConfig, *msx_platform_client.StartWorkflowOpts) error); ok {
		r2 = rf(ctx, id, workflowStartConfig, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateWorkflow provides a mock function with given fields: ctx, id, requestBody, localVarOptionals
func (_m *MockWorkflowsApi) UpdateWorkflow(ctx context.Context, id string, requestBody map[string]map[string]interface{}, localVarOptionals *msx_platform_client.UpdateWorkflowOpts) (msx_platform_client.WorkflowMapping, *http.Response, error) {
	ret := _m.Called(ctx, id, requestBody, localVarOptionals)

	var r0 msx_platform_client.WorkflowMapping
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]map[string]interface{}, *msx_platform_client.UpdateWorkflowOpts) msx_platform_client.WorkflowMapping); ok {
		r0 = rf(ctx, id, requestBody, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowMapping)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]map[string]interface{}, *msx_platform_client.UpdateWorkflowOpts) *http.Response); ok {
		r1 = rf(ctx, id, requestBody, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]map[string]interface{}, *msx_platform_client.UpdateWorkflowOpts) error); ok {
		r2 = rf(ctx, id, requestBody, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateWorkflow provides a mock function with given fields: ctx, id
func (_m *MockWorkflowsApi) ValidateWorkflow(ctx context.Context, id string) (msx_platform_client.ValidateWorkflowResponse, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.ValidateWorkflowResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.ValidateWorkflowResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.ValidateWorkflowResponse)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
