// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockUsersApi is an autogenerated mock type for the UsersApi type
type MockUsersApi struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, userCreate
func (_m *MockUsersApi) CreateUser(ctx context.Context, userCreate msx_platform_client.UserCreate) (msx_platform_client.User, *http.Response, error) {
	ret := _m.Called(ctx, userCreate)

	var r0 msx_platform_client.User
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.UserCreate) msx_platform_client.User); ok {
		r0 = rf(ctx, userCreate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.User)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.UserCreate) *http.Response); ok {
		r1 = rf(ctx, userCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, msx_platform_client.UserCreate) error); ok {
		r2 = rf(ctx, userCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockUsersApi) DeleteUser(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: ctx
func (_m *MockUsersApi) GetCurrentUser(ctx context.Context) (msx_platform_client.User, *http.Response, error) {
	ret := _m.Called(ctx)

	var r0 msx_platform_client.User
	if rf, ok := ret.Get(0).(func(context.Context) msx_platform_client.User); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(msx_platform_client.User)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context) *http.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockUsersApi) GetUser(ctx context.Context, id string) (msx_platform_client.User, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.User
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.User)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUsersPage provides a mock function with given fields: ctx, page, pageSize, localVarOptionals
func (_m *MockUsersApi) GetUsersPage(ctx context.Context, page int32, pageSize int32, localVarOptionals *msx_platform_client.GetUsersPageOpts) (msx_platform_client.UsersPage, *http.Response, error) {
	ret := _m.Called(ctx, page, pageSize, localVarOptionals)

	var r0 msx_platform_client.UsersPage
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, *msx_platform_client.GetUsersPageOpts) msx_platform_client.UsersPage); ok {
		r0 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r0 = ret.Get(0).(msx_platform_client.UsersPage)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, *msx_platform_client.GetUsersPageOpts) *http.Response); ok {
		r1 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int32, int32, *msx_platform_client.GetUsersPageOpts) error); ok {
		r2 = rf(ctx, page, pageSize, localVarOptionals)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: ctx, id, userUpdate
func (_m *MockUsersApi) UpdateUser(ctx context.Context, id string, userUpdate msx_platform_client.UserUpdate) (msx_platform_client.User, *http.Response, error) {
	ret := _m.Called(ctx, id, userUpdate)

	var r0 msx_platform_client.User
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.UserUpdate) msx_platform_client.User); ok {
		r0 = rf(ctx, id, userUpdate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.User)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.UserUpdate) *http.Response); ok {
		r1 = rf(ctx, id, userUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.UserUpdate) error); ok {
		r2 = rf(ctx, id, userUpdate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserPassword provides a mock function with given fields: ctx, updatePassword
func (_m *MockUsersApi) UpdateUserPassword(ctx context.Context, updatePassword msx_platform_client.UpdatePassword) (*http.Response, error) {
	ret := _m.Called(ctx, updatePassword)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.UpdatePassword) *http.Response); ok {
		r0 = rf(ctx, updatePassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.UpdatePassword) error); ok {
		r1 = rf(ctx, updatePassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
