// Code generated by mockery v2.3.0. DO NOT EDIT.

package platform

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	msx_platform_client "cto-github.cisco.com/NFV-BU/msx-platform-go-client"
)

// MockWorkflowEventsApi is an autogenerated mock type for the WorkflowEventsApi type
type MockWorkflowEventsApi struct {
	mock.Mock
}

// CreateWorkflowEvent provides a mock function with given fields: ctx, workflowEventCreate
func (_m *MockWorkflowEventsApi) CreateWorkflowEvent(ctx context.Context, workflowEventCreate msx_platform_client.WorkflowEventCreate) (msx_platform_client.WorkflowEvent, *http.Response, error) {
	ret := _m.Called(ctx, workflowEventCreate)

	var r0 msx_platform_client.WorkflowEvent
	if rf, ok := ret.Get(0).(func(context.Context, msx_platform_client.WorkflowEventCreate) msx_platform_client.WorkflowEvent); ok {
		r0 = rf(ctx, workflowEventCreate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowEvent)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, msx_platform_client.WorkflowEventCreate) *http.Response); ok {
		r1 = rf(ctx, workflowEventCreate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, msx_platform_client.WorkflowEventCreate) error); ok {
		r2 = rf(ctx, workflowEventCreate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteWorkflowEvent provides a mock function with given fields: ctx, id
func (_m *MockWorkflowEventsApi) DeleteWorkflowEvent(ctx context.Context, id string) (*http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) *http.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowEvent provides a mock function with given fields: ctx, id
func (_m *MockWorkflowEventsApi) GetWorkflowEvent(ctx context.Context, id string) (msx_platform_client.WorkflowEvent, *http.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 msx_platform_client.WorkflowEvent
	if rf, ok := ret.Get(0).(func(context.Context, string) msx_platform_client.WorkflowEvent); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowEvent)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWorkflowEventsList provides a mock function with given fields: ctx
func (_m *MockWorkflowEventsApi) GetWorkflowEventsList(ctx context.Context) ([]msx_platform_client.WorkflowEvent, *http.Response, error) {
	ret := _m.Called(ctx)

	var r0 []msx_platform_client.WorkflowEvent
	if rf, ok := ret.Get(0).(func(context.Context) []msx_platform_client.WorkflowEvent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]msx_platform_client.WorkflowEvent)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context) *http.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateWorkflowEvent provides a mock function with given fields: ctx, id, workflowEventUpdate
func (_m *MockWorkflowEventsApi) UpdateWorkflowEvent(ctx context.Context, id string, workflowEventUpdate msx_platform_client.WorkflowEventUpdate) (msx_platform_client.WorkflowEvent, *http.Response, error) {
	ret := _m.Called(ctx, id, workflowEventUpdate)

	var r0 msx_platform_client.WorkflowEvent
	if rf, ok := ret.Get(0).(func(context.Context, string, msx_platform_client.WorkflowEventUpdate) msx_platform_client.WorkflowEvent); ok {
		r0 = rf(ctx, id, workflowEventUpdate)
	} else {
		r0 = ret.Get(0).(msx_platform_client.WorkflowEvent)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, msx_platform_client.WorkflowEventUpdate) *http.Response); ok {
		r1 = rf(ctx, id, workflowEventUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, msx_platform_client.WorkflowEventUpdate) error); ok {
		r2 = rf(ctx, id, workflowEventUpdate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
