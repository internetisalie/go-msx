// Code generated by mockery v2.3.0. DO NOT EDIT.

package rbac

import (
	context "context"

	types "cto-github.cisco.com/NFV-BU/go-msx/types"
	mock "github.com/stretchr/testify/mock"
)

// MockTenantHierarchyApi is an autogenerated mock type for the TenantHierarchyApi type
type MockTenantHierarchyApi struct {
	mock.Mock
}

// Ancestors provides a mock function with given fields: ctx, tenantId
func (_m *MockTenantHierarchyApi) Ancestors(ctx context.Context, tenantId types.UUID) ([]types.UUID, error) {
	ret := _m.Called(ctx, tenantId)

	var r0 []types.UUID
	if rf, ok := ret.Get(0).(func(context.Context, types.UUID) []types.UUID); ok {
		r0 = rf(ctx, tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.UUID) error); ok {
		r1 = rf(ctx, tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parent provides a mock function with given fields: ctx, tenantId
func (_m *MockTenantHierarchyApi) Parent(ctx context.Context, tenantId types.UUID) (types.UUID, error) {
	ret := _m.Called(ctx, tenantId)

	var r0 types.UUID
	if rf, ok := ret.Get(0).(func(context.Context, types.UUID) types.UUID); ok {
		r0 = rf(ctx, tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.UUID) error); ok {
		r1 = rf(ctx, tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Root provides a mock function with given fields: ctx
func (_m *MockTenantHierarchyApi) Root(ctx context.Context) (types.UUID, error) {
	ret := _m.Called(ctx)

	var r0 types.UUID
	if rf, ok := ret.Get(0).(func(context.Context) types.UUID); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
