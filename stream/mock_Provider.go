// Code generated by mockery v2.9.4. DO NOT EDIT.

package stream

import (
	config "cto-github.cisco.com/NFV-BU/go-msx/config"
	mock "github.com/stretchr/testify/mock"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

// NewPublisher provides a mock function with given fields: cfg, name, configuration
func (_m *MockProvider) NewPublisher(cfg *config.Config, name string, configuration *BindingConfiguration) (Publisher, error) {
	ret := _m.Called(cfg, name, configuration)

	var r0 Publisher
	if rf, ok := ret.Get(0).(func(*config.Config, string, *BindingConfiguration) Publisher); ok {
		r0 = rf(cfg, name, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Publisher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.Config, string, *BindingConfiguration) error); ok {
		r1 = rf(cfg, name, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriber provides a mock function with given fields: cfg, name, configuration
func (_m *MockProvider) NewSubscriber(cfg *config.Config, name string, configuration *BindingConfiguration) (Subscriber, error) {
	ret := _m.Called(cfg, name, configuration)

	var r0 Subscriber
	if rf, ok := ret.Get(0).(func(*config.Config, string, *BindingConfiguration) Subscriber); ok {
		r0 = rf(cfg, name, configuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Subscriber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*config.Config, string, *BindingConfiguration) error); ok {
		r1 = rf(cfg, name, configuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
