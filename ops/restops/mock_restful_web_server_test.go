// Code generated by mockery v2.14.0. DO NOT EDIT.

package restops

import (
	restful "github.com/emicklei/go-restful"
	mock "github.com/stretchr/testify/mock"
)

// MockRestfulWebServer is an autogenerated mock type for the RestfulWebServer type
type MockRestfulWebServer struct {
	mock.Mock
}

type MockRestfulWebServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRestfulWebServer) EXPECT() *MockRestfulWebServer_Expecter {
	return &MockRestfulWebServer_Expecter{mock: &_m.Mock}
}

// NewService provides a mock function with given fields: root
func (_m *MockRestfulWebServer) NewService(root string) (*restful.WebService, error) {
	ret := _m.Called(root)

	var r0 *restful.WebService
	if rf, ok := ret.Get(0).(func(string) *restful.WebService); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*restful.WebService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRestfulWebServer_NewService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewService'
type MockRestfulWebServer_NewService_Call struct {
	*mock.Call
}

// NewService is a helper method to define mock.On call
//  - root string
func (_e *MockRestfulWebServer_Expecter) NewService(root string) *MockRestfulWebServer_NewService_Call {
	return &MockRestfulWebServer_NewService_Call{Call: _e.mock.On("NewService", root)}
}

func (_c *MockRestfulWebServer_NewService_Call) Run(run func(root string)) *MockRestfulWebServer_NewService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRestfulWebServer_NewService_Call) Return(_a0 *restful.WebService, _a1 error) *MockRestfulWebServer_NewService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMockRestfulWebServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRestfulWebServer creates a new instance of MockRestfulWebServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRestfulWebServer(t mockConstructorTestingTNewMockRestfulWebServer) *MockRestfulWebServer {
	mock := &MockRestfulWebServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
