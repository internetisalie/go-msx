// Code generated by mockery v2.14.0. DO NOT EDIT.

package ops

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	types "cto-github.cisco.com/NFV-BU/go-msx/types"
)

// MockInputDecoder is an autogenerated mock type for the InputDecoder type
type MockInputDecoder struct {
	mock.Mock
}

// DecodeAny provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeAny(pf *PortField) (types.Optional[interface{}], error) {
	ret := _m.Called(pf)

	var r0 types.Optional[interface{}]
	if rf, ok := ret.Get(0).(func(*PortField) types.Optional[interface{}]); ok {
		r0 = rf(pf)
	} else {
		r0 = ret.Get(0).(types.Optional[interface{}])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeArray provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeArray(pf *PortField) ([]string, error) {
	ret := _m.Called(pf)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*PortField) []string); ok {
		r0 = rf(pf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeContent provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeContent(pf *PortField) (Content, error) {
	ret := _m.Called(pf)

	var r0 Content
	if rf, ok := ret.Get(0).(func(*PortField) Content); ok {
		r0 = rf(pf)
	} else {
		r0 = ret.Get(0).(Content)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeFile provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeFile(pf *PortField) (*multipart.FileHeader, error) {
	ret := _m.Called(pf)

	var r0 *multipart.FileHeader
	if rf, ok := ret.Get(0).(func(*PortField) *multipart.FileHeader); ok {
		r0 = rf(pf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeFileArray provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeFileArray(pf *PortField) ([]*multipart.FileHeader, error) {
	ret := _m.Called(pf)

	var r0 []*multipart.FileHeader
	if rf, ok := ret.Get(0).(func(*PortField) []*multipart.FileHeader); ok {
		r0 = rf(pf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeObject provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodeObject(pf *PortField) (types.Pojo, error) {
	ret := _m.Called(pf)

	var r0 types.Pojo
	if rf, ok := ret.Get(0).(func(*PortField) types.Pojo); ok {
		r0 = rf(pf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Pojo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodePrimitive provides a mock function with given fields: pf
func (_m *MockInputDecoder) DecodePrimitive(pf *PortField) (types.Optional[string], error) {
	ret := _m.Called(pf)

	var r0 types.Optional[string]
	if rf, ok := ret.Get(0).(func(*PortField) types.Optional[string]); ok {
		r0 = rf(pf)
	} else {
		r0 = ret.Get(0).(types.Optional[string])
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PortField) error); ok {
		r1 = rf(pf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockInputDecoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInputDecoder creates a new instance of MockInputDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInputDecoder(t mockConstructorTestingTNewMockInputDecoder) *MockInputDecoder {
	mock := &MockInputDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
