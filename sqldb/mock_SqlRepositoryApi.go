// Code generated by mockery v2.14.0. DO NOT EDIT.

package sqldb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSqlRepositoryApi is an autogenerated mock type for the SqlRepositoryApi type
type MockSqlRepositoryApi struct {
	mock.Mock
}

// SqlExecute provides a mock function with given fields: ctx, stmt, args
func (_m *MockSqlRepositoryApi) SqlExecute(ctx context.Context, stmt string, args []interface{}) error {
	ret := _m.Called(ctx, stmt, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}) error); ok {
		r0 = rf(ctx, stmt, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SqlGet provides a mock function with given fields: ctx, stmt, args, dest
func (_m *MockSqlRepositoryApi) SqlGet(ctx context.Context, stmt string, args []interface{}, dest interface{}) error {
	ret := _m.Called(ctx, stmt, args, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, interface{}) error); ok {
		r0 = rf(ctx, stmt, args, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SqlSelect provides a mock function with given fields: ctx, stmt, args, dest
func (_m *MockSqlRepositoryApi) SqlSelect(ctx context.Context, stmt string, args []interface{}, dest interface{}) error {
	ret := _m.Called(ctx, stmt, args, dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []interface{}, interface{}) error); ok {
		r0 = rf(ctx, stmt, args, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockSqlRepositoryApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSqlRepositoryApi creates a new instance of MockSqlRepositoryApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSqlRepositoryApi(t mockConstructorTestingTNewMockSqlRepositoryApi) *MockSqlRepositoryApi {
	mock := &MockSqlRepositoryApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
