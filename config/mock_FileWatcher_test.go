// Code generated by mockery v2.3.0. DO NOT EDIT.

package config

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	watcher "github.com/radovskyb/watcher"
)

// MockFileWatcher is an autogenerated mock type for the FileWatcher type
type MockFileWatcher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockFileWatcher) Close() {
	_m.Called()
}

// Closed provides a mock function with given fields:
func (_m *MockFileWatcher) Closed() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *MockFileWatcher) Error() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Event provides a mock function with given fields:
func (_m *MockFileWatcher) Event() <-chan watcher.Event {
	ret := _m.Called()

	var r0 <-chan watcher.Event
	if rf, ok := ret.Get(0).(func() <-chan watcher.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan watcher.Event)
		}
	}

	return r0
}

// FilterOps provides a mock function with given fields: _a0
func (_m *MockFileWatcher) FilterOps(_a0 ...watcher.Op) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// SetMaxEvents provides a mock function with given fields: _a0
func (_m *MockFileWatcher) SetMaxEvents(_a0 int) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields: _a0
func (_m *MockFileWatcher) Start(_a0 time.Duration) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
